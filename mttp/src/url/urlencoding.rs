use core::str;

pub fn decode_binary(input: &str) -> Option<Vec<u8>> {
    let input = input.as_bytes();

    let mut output = Vec::new();
    let mut i = 0;

    while let Some(current) = input.get(i) {
        match *current {
            b'+' => {
                output.push(b' ');
                i += 1;
                continue;
            }

            b'%' => {}

            _ => {
                output.push(*current);
                i += 1;
                continue;
            }
        }

        let Some(encoded) = input.get(i + 1..i + 3) else {
            return None;
        };

        let s = str::from_utf8(encoded)
            .expect("this came from a string so it should still be a valid string");
        let Ok(res) = u8::from_str_radix(s, 16) else {
            return None;
        };
        output.push(res);
        i += 3;
    }

    return Some(output);
}

pub fn decode_string(input: &str) -> Option<String> {
    String::from_utf8(decode_binary(input)?).ok()
}

#[test]
fn test_urldecode_string1() {
    let input = "fakten+lage";
    let expected = "fakten lage".to_owned();
    let got = decode_string(input);

    assert_eq!(got, Some(expected));
}

#[test]
fn test_urldecode_string2() {
    let input = "https://www.google.com/search?q=%C3%BC%C3%B6%C3%A4%2F%2Fabc%C3%BC";
    let expected = "https://www.google.com/search?q=üöä//abcü".to_owned();
    let got = decode_string(input);

    assert_eq!(got, Some(expected));
}

#[test]
fn test_urldecode_binary1() {
    let input = "%FF%D8%FF%E0%00%10JFIF%00%01%01%01%00G%00G%00%00%FF%DB%00C%00%06%04%05%06%05%04%06%06%05%06%07%07%06%08%0A%10%0A%0A%09%09\
    %0A%14%0E%0F%0C%10%17%14%18%18%17%14%16%16%1A%1D%25%1F%1A%1B%23%1C%16%16%20%2C%20%23%26%27%29%2A%29%19%1F-0-%280%25%28%29%28%FF%DB%00C%01%07\
    %07%07%0A%08%0A%13%0A%0A%13%28%1A%16%1A%28%28%28%28%28%28%28%28%28%28%28%28%28%28%28%28%28%28%28%28%28%28%28%28%28%28%28%28%28%28%28%28%28%28\
    %28%28%28%28%28%28%28%28%28%28%28%28%28%28%28%28%FF%C0%00%11%08%00%19%00%19%03%01%22%00%02%11%01%03%11%01%FF%C4%00%1F%00%00%01%05%01%01%01\
    %01%01%01%00%00%00%00%00%00%00%00%01%02%03%04%05%06%07%08%09%0A%0B%FF%C4%00%B5%10%00%02%01%03%03%02%04%03%05%05%04%04%00%00%01%7D%01%02%03\
    %00%04%11%05%12%211A%06%13Qa%07%22q%142%81%91%A1%08%23B%B1%C1%15R%D1%F0%243br%82%09%0A%16%17%18%19%1A%25%26%27%28%29\
    %2A456789%3ACDEFGHIJSTUVWXYZcdefghijstuvwxyz%83%84%85%86%87%88%89%8A%92%93%94%95%96%97%98%99%9A%A2%A3%A4%A5%A6%A7%A8%A9%AA%B2%B3%B4%B5%B6\
    %B7%B8%B9%BA%C2%C3%C4%C5%C6%C7%C8%C9%CA%D2%D3%D4%D5%D6%D7%D8%D9%DA%E1%E2%E3%E4%E5%E6%E7%E8%E9%EA%F1%F2%F3%F4%F5%F6%F7%F8%F9%FA%FF%C4%00%1F\
    %01%00%03%01%01%01%01%01%01%01%01%01%00%00%00%00%00%00%01%02%03%04%05%06%07%08%09%0A%0B%FF%C4%00%B5%11%00%02%01%02%04%04%03%04%07%05%04%04\
    %00%01%02w%00%01%02%03%11%04%05%211%06%12AQ%07aq%13%222%81%08%14B%91%A1%B1%C1%09%233R%F0%15br%D1%0A%16%244%E1%25%F1%17%18%19%1A%26%27%28%29%\
    2A56789%3ACDEFGHIJSTUVWXYZcdefghijstuvwxyz%82%83%84%85%86%87%88%89%8A%92%93%94%95%96%97%98%99%9A%A2%A3%A4%A5%A6%A7%A8%A9%AA%B2%B3%B4%B5%B6\
    %B7%B8%B9%BA%C2%C3%C4%C5%C6%C7%C8%C9%CA%D2%D3%D4%D5%D6%D7%D8%D9%DA%E2%E3%E4%E5%E6%E7%E8%E9%EA%F2%F3%F4%F5%F6%F7%F8%F9%FA%FF%DA%00%0C%03%01\
    %00%02%11%03%11%00%3F%00%F4%87%D6nWP%B5%82%DFI%B2%9A%D9%B3%E7H%EE%06%C1%EC6%9C%FE%24T%FE%2C%D54%98%60%8E%DF%ED%1A%2C%17R%15%C4W%12%AC-%B7\
    %3C%95%3D%CF%A0%3CW%8A%E9%1E%21%D4%AD.vD%12Dn%3Fx%C4c%F1%CDb%F8%F6%21u%AEi%F7%1A%A5%D43%15%01%CA%ACg%0A3%90%19%B3%C8%3C%D4%CB%93%95%DD%1AF\
    %12n%C8%F4%86%F1%04%23%2A%D6%9F%288%2C0G%E9M%FF%00%84%82%CB%FEx%BF%FD%F1%5C5%CD%EC%B7P%3D%CA%C3%2A%C7%2B%16%04G%88%F9%3D%8EqT3%27%F7W%FE%FB\
    %1F%E1%5E%3BqOb%E5Fg9%A4%5D%C6uX%12%FEvKR%E09%DCHQ%EA%7D%ABG%C4%D3%EC%D5%E5H%AE%E0%BE%85%B0c%9A%2C%3A%94%FE%103%D3%03%8CW7q%F7%DB%F0%FE\
    %95sN%FF%00%8F%E8~%A9%FD%2B%D8fjGeu%E2k%EBO%0B%CCe%96%E2%F2%FBX%0D%05%C9%9Eue%82%24%2B%B4%24A%B2%A4%E3%EF0%1C%7D%DE%E6%B8%EF%B6%FF%00%B1\
    %27%E6%2B%A0%D6%BF%E5%9F%FDq%3F%FA%11%AEN%B9%A7%04%DE%A5%C6%A3%8E%C7%FF%D9";
    let expected = [
        255, 216, 255, 224, 0, 16, 74, 70, 73, 70, 0, 1, 1, 1, 0, 71, 0, 71, 0, 0, 255, 219, 0, 67,
        0, 6, 4, 5, 6, 5, 4, 6, 6, 5, 6, 7, 7, 6, 8, 10, 16, 10, 10, 9, 9, 10, 20, 14, 15, 12, 16,
        23, 20, 24, 24, 23, 20, 22, 22, 26, 29, 37, 31, 26, 27, 35, 28, 22, 22, 32, 44, 32, 35, 38,
        39, 41, 42, 41, 25, 31, 45, 48, 45, 40, 48, 37, 40, 41, 40, 255, 219, 0, 67, 1, 7, 7, 7,
        10, 8, 10, 19, 10, 10, 19, 40, 26, 22, 26, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
        40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
        40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 255, 192, 0, 17, 8, 0, 25, 0,
        25, 3, 1, 34, 0, 2, 17, 1, 3, 17, 1, 255, 196, 0, 31, 0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0,
        0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 255, 196, 0, 181, 16, 0, 2, 1, 3, 3,
        2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 125, 1, 2, 3, 0, 4, 17, 5, 18, 33, 49, 65, 6, 19, 81, 97, 7,
        34, 113, 20, 50, 129, 145, 161, 8, 35, 66, 177, 193, 21, 82, 209, 240, 36, 51, 98, 114,
        130, 9, 10, 22, 23, 24, 25, 26, 37, 38, 39, 40, 41, 42, 52, 53, 54, 55, 56, 57, 58, 67, 68,
        69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105,
        106, 115, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 146,
        147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178,
        179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210,
        211, 212, 213, 214, 215, 216, 217, 218, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234,
        241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 255, 196, 0, 31, 1, 0, 3, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 255, 196, 0, 181, 17, 0,
        2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 119, 0, 1, 2, 3, 17, 4, 5, 33, 49, 6, 18, 65, 81,
        7, 97, 113, 19, 34, 50, 129, 8, 20, 66, 145, 161, 177, 193, 9, 35, 51, 82, 240, 21, 98,
        114, 209, 10, 22, 36, 52, 225, 37, 241, 23, 24, 25, 26, 38, 39, 40, 41, 42, 53, 54, 55, 56,
        57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102,
        103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 130, 131, 132, 133, 134, 135,
        136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167,
        168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199,
        200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 227, 228, 229, 230, 231,
        232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 249, 250, 255, 218, 0, 12, 3, 1, 0, 2,
        17, 3, 17, 0, 63, 0, 244, 135, 214, 110, 87, 80, 181, 130, 223, 73, 178, 154, 217, 179,
        231, 72, 238, 6, 193, 236, 54, 156, 254, 36, 84, 254, 44, 213, 52, 152, 96, 142, 223, 237,
        26, 44, 23, 82, 21, 196, 87, 18, 172, 45, 183, 60, 149, 61, 207, 160, 60, 87, 138, 233, 30,
        33, 212, 173, 46, 118, 68, 18, 68, 110, 63, 120, 196, 99, 241, 205, 98, 248, 246, 33, 117,
        174, 105, 247, 26, 165, 212, 51, 21, 1, 202, 172, 103, 10, 51, 144, 25, 179, 200, 60, 212,
        203, 147, 149, 221, 26, 70, 18, 110, 200, 244, 134, 241, 4, 35, 42, 214, 159, 40, 56, 44,
        48, 71, 233, 77, 255, 0, 132, 130, 203, 254, 120, 191, 253, 241, 92, 53, 205, 236, 183, 80,
        61, 202, 195, 42, 199, 43, 22, 4, 71, 136, 249, 61, 142, 113, 84, 51, 39, 247, 87, 254,
        251, 31, 225, 94, 59, 113, 79, 98, 229, 70, 103, 57, 164, 93, 198, 117, 88, 18, 254, 118,
        75, 82, 224, 57, 220, 72, 81, 234, 125, 171, 71, 196, 211, 236, 213, 229, 72, 174, 224,
        190, 133, 176, 99, 154, 44, 58, 148, 254, 16, 51, 211, 3, 140, 87, 55, 113, 247, 219, 240,
        254, 149, 115, 78, 255, 0, 143, 232, 126, 169, 253, 43, 216, 102, 106, 71, 101, 117, 226,
        107, 235, 79, 11, 204, 101, 150, 226, 242, 251, 88, 13, 5, 201, 158, 117, 101, 130, 36, 43,
        180, 36, 65, 178, 164, 227, 239, 48, 28, 125, 222, 230, 184, 239, 182, 255, 0, 177, 39,
        230, 43, 160, 214, 191, 229, 159, 253, 113, 63, 250, 17, 174, 78, 185, 167, 4, 222, 165,
        198, 163, 142, 199, 255, 217,
    ]
    .to_vec();
    let got = decode_binary(input);

    assert_eq!(got, Some(expected));
}
